/*
Hooking into fud which does the personalization request

Attach as follows:

   while true; do frida -U fud --no-pause -l hook_durian_update_fud.js; sleep 1; done

TODO also overwrite the ftab.bin file!


*/


class Durian {

    constructor() {

        /*** INITIALIZE SCRIPT ***/
        this.ios_version = "arm64_14.7";  // adjust iOS version here! (nothing version-specificc so far...)

        /*
        We want to fake this. The digests are SHA384 over rkos and sbd1 in the ftab.bin file.
        From the 3rd update:

            "Rap,RTKitOS" =     {
                Digest = {length = 48, bytes = 0x08ce15c2 0f4f9a29 20a064cd 4dc08477 ... d317d5c7 2af38a40 };
                EPRO = 1;
                ESEC = 1;
                Trusted = 1;
            };
            "Rap,SoftwareBinaryDsp1" =     {
                Digest = {length = 48, bytes = 0xb7ef1b89 53103c04 37dd4807 58733707 ... 994c0a80 bd036588 };
                EPRO = 1;
                ESEC = 1;
                Trusted = 1;
            };
        */

        // TODO uncomment the following if you want to overwrite the values generated by the regular daemon
        // values from the 1st update (1.0.276	1A276d	3 Jun 2021	ae34f4b8aec8a4d4562227109be101728b7bef20)
        // TSS validates sha384 sums, no arbitrary values

        this.durian_digest_rtkitos = [0x1f, 0xcb, 0x05, 0xb3, 0x77, 0xeb, 0x40, 0x5e, 0xef, 0xfc, 0x5a, 0xd6, 0x0e, 0xfc,
        0xe6, 0xae, 0xed, 0x3b, 0x83, 0xd8, 0x34, 0xe0, 0x40, 0x3b, 0xd8, 0x8a, 0x14, 0x2d, 0x84, 0xc6, 0x08, 0x2e, 0xa6,
        0xc6, 0x49, 0xeb, 0xf1, 0x4a, 0xe0, 0x5b, 0x1a, 0x87, 0xd1, 0x59, 0xe9, 0xdc, 0x16, 0x7c];
        this.durian_digest_dsp = [0x92, 0x8a, 0x22, 0x6b, 0x85, 0xb5, 0x2c, 0x75, 0xf0, 0x7f, 0xb3, 0xcd, 0x89, 0xf1,
        0xc3, 0x8a, 0x78, 0x3b, 0xb9, 0x83, 0x4d, 0xe6, 0x47, 0x40, 0x7b, 0x93, 0x5a, 0x95, 0x23, 0x59, 0xd3, 0x6b, 0x24
        0x3a, 0x58, 0xfa, 0x43, 0xa1, 0x72, 0xd1, 0xe3, 0x9c, 0x3d, 0x43, 0x2d, 0x1a, 0x30, 0x30];

        this.durian_trusted = 1;
        this.durian_production_mode = 1;
        this.durian_security_mode = 1;


        this.object_info;


    }



    /*
    Script preparation, needs to be called in standalone usage.
    Separated from constructor for external script usage.
    */
    prepare() {

        var self = this;

        // sha384sum and ecid applied here
        self.hookPersonalization();

        // just overwrite the ftab
        self.hookFTAB();

    }

    // Backtrace helper function
    print_backtrace(ctx) {
        console.log('Backtrace:\n' +
        Thread.backtrace(ctx, Backtracer.ACCURATE)
        .map(DebugSymbol.fromAddress).join('\n') + '\n');
    }

    // Helper function to print hex
    print_hex(byte_array) {
        var bytes_string = "";
        for (var i = 0; i < byte_array.length; i+=1) {
            bytes_string += ("00" + byte_array[i].toString(16)).substr(-2);
        }
        console.log('\t' + bytes_string);
    }


    hookPersonalization() {

        var {FudPersonalizationObjectInfo} = ObjC.classes;
        var {FudPersonalizer} = ObjC.classes;
        var {CFDictionarySetValue} = ObjC.classes;
        var {CFSTR} = ObjC.classes;
        var self = this;


        /*
        Input: FudPersonalizationObjectInfo, already contains all info
        Output: CFDictionarySetValue
        */
        Interceptor.attach(FudPersonalizer['- createPersonalizationObjectCFDict:'].implementation, {
            onEnter: function(args) {
                console.log(" * createPersonalizationObjectCFDict");
                self.object_info = new ObjC.Object(args[2]);  // FudPersonalizationObjectInfo
                console.log(self.object_info);  // <FudPersonalizationObjectInfo: 0x10063d1b0>


                var tag = self.object_info.objectTag().toString();
                console.log(tag); // Rap,SoftwareBinaryDsp1 or Rap,RTKitOS
                console.log(self.object_info.digest());  // {length = 48, bytes = 0xb7ef1b89 53103c04 37dd4807 58733707 ... 994c0a80 bd036588 }

                // -[FudPersonalizationObjectInfo setDigest:]
                if (self.durian_digest_rtkitos && tag.localeCompare('Rap,RTKitOS') == 0 ) {
                    self.object_info.setDigest_(self.allocNSData(self.durian_digest_rtkitos));
                } else if (self.durian_digest_dsp) {
                    self.object_info.setDigest_(self.allocNSData(self.durian_digest_dsp));
                }
                console.log(" ! Digest set.");
                console.log(self.object_info.digest());

                // -[FudPersonalizationObjectInfo setTrusted:]
                // -[FudPersonalizationObjectInfo setEffectiveProductionMode:]
                // -[FudPersonalizationObjectInfo setEffectiveSecurityMode:]
                // all of these take a char as argument (IDA) but are boolean
                if (self.durian_trusted) {
                    self.object_info.setTrusted_(self.durian_trusted);
                }
                if (self.durian_production_mode) {
                    self.object_info.setEffectiveProductionMode_(self.durian_production_mode);
                }
                if (self.durian_security_mode) {
                self.object_info.setEffectiveSecurityMode_(self.durian_security_mode);
                }
                console.log(" ! Trusted, EffectiveProductionMode and EffectiveSecurityMode set.");

            }
        });

        Interceptor.attach(FudPersonalizer['- createPersonalizationManifestCFDict:'].implementation, {
            onEnter: function(args) {
                console.log(" * createPersonalizationManifestCFDict");
            },
            onLeave: function(r) {
                console.log(" * Final manifest:");
                console.log(new ObjC.Object(r));

            }
        });

    }


    /*
    Hooking the ftab.bin readout... but we seem to attach too late :(
    */
    hookFTAB() {

        var {CLDurianMobileAssetUpdater} = ObjC.classes;
        var self = this;

        Interceptor.attach(CLDurianMobileAssetUpdater['- getFTAB:'].implementation, {
            onEnter: function(args) {
                console.log(" * CLDurianMobileAssetUpdater getFTAB");
            },
            onLeave: function(r) {
                console.log(new ObjC.Object(r));

            }
        });
    }



    /*
    NSData helper function required to allocate parameters in CLDurianCommands.
    Takes input array in the form [1, 2, 3, 4, ...] as passed by JavaScript.
    */
    allocNSData(bytes) {
        // alloc memory for raw bytes
        var params_raw = Memory.alloc(bytes.length);
        params_raw.writeByteArray(bytes);

        // NSData['- initWithBytes:length:']
        var {NSData} = ObjC.classes;
        return NSData.alloc().initWithBytes_length_(params_raw, bytes.length);
    }


    /*
    Version-specific symbols, needs to be adjusted for every version.
    */
    setSymbols(ios_version) {

        var self = this;

        // tested on an iPhone 8
        if (ios_version == "arm64_14.7") {
            console.log("  * Set symbols to pre-A12 iOS 14.7");

        }
        else {
            console.log("  ! undefined symbols");
        }


    }


    // Export class methods for Frida
    // TODO not used with an external script yet...
    makeExports() {
        var self = this;
        return {
            setsymbols: (ios_version) => {return self.setSymbols(ios_version)},
            prepare: () => {return self.prepare()},
        }
    }

}

var d = new Durian();

// Prepare the target function
d.prepare(); //TODO call this when standalone

// Required to interact with Python ...
// Yep even the standalone fuzzer should use this because calling the fuzzer
// directly will timeout on large payloads
rpc.exports = d.makeExports();
rpc.exports.d = Durian;
